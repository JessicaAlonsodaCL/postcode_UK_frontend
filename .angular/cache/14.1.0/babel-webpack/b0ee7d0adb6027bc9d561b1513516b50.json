{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { Postcode } from './shared/postcode.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./app-service.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/google-maps\";\n\nfunction AppComponent_map_marker_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"map-marker\", 11);\n  }\n\n  if (rf & 2) {\n    const marker_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"position\", marker_r4.position);\n  }\n}\n\nfunction AppComponent_map_directions_renderer_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"map-directions-renderer\", 12);\n  }\n\n  if (rf & 2) {\n    const directionsResults_r5 = ctx.ngIf;\n    i0.ɵɵproperty(\"directions\", directionsResults_r5);\n  }\n}\n\nfunction AppComponent_a_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 13)(1, \"label\", 2);\n    i0.ɵɵtext(2, \"postcode:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementStart(4, \"label\", 2);\n    i0.ɵɵtext(5, \"Lat.:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(6);\n    i0.ɵɵelementStart(7, \"label\", 2);\n    i0.ɵɵtext(8, \"Longitude.:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const postcode_r6 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", postcode_r6.postcode, \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" (\", postcode_r6.latitude, \") \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", postcode_r6.longitude, \" \");\n  }\n}\n\nexport class AppComponent {\n  constructor(service) {\n    this.service = service;\n    this.title = 'postcodes-app';\n    this.postcodes = [];\n    this.postcode = '';\n    this.markers = [];\n    this.zoom = 4;\n  }\n\n  ngOnInit() {\n    this.airportLondon = {\n      lat: 51.4700223,\n      lng: -0.4542955\n    };\n  }\n\n  getDataFromAPI(postcode) {\n    this.service.getData(postcode).pipe(map(res => JSON.parse(JSON.stringify(res)))).subscribe({\n      next: response => {\n        console.log('Response from API is ', response);\n\n        if (this.postcodes.length < 3) {\n          this.postcodes.push(new Postcode(response.postcode, response.latitude, response.longitude, response.country, response.region));\n        } else {\n          this.postcodes.shift();\n          this.postcodes.push(new Postcode(response.postcode, response.latitude, response.longitude, response.country, response.region));\n        }\n\n        this.changePositionMap(response.latitude, response.longitude);\n      },\n      error: error => {\n        console.log('Error is', error);\n      }\n    });\n  }\n\n  onEnter(value) {\n    this.postcode = value;\n    this.getDataFromAPI(this.postcode);\n  }\n\n  changePositionMap(lat, long) {\n    this.center = {};\n    this.markers.push({\n      position: {\n        lat: lat,\n        lng: long\n      }\n    });\n  }\n\n  moveMap(event) {\n    if (event.latLng != null) this.center = event.latLng.toJSON();\n  }\n\n  move(event) {\n    if (event.latLng != null) this.display = event.latLng.toJSON();\n  }\n\n}\n\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.AppServiceService));\n};\n\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 20,\n  vars: 7,\n  consts: [[1, \"row\"], [1, \"col-xs-12\"], [1, \"control-label\"], [1, \"sr-only\"], [\"type\", \"postcode\", \"id\", \"inputPassword2\", \"placeholder\", \"Postcode\", 1, \"form-control\", 3, \"keyup.enter\"], [\"postcode\", \"\"], [\"height\", \"400px\", \"width\", \"1140px\", 3, \"center\", \"zoom\", \"mapClick\", \"mapMousemove\"], [3, \"position\", 4, \"ngFor\", \"ngForOf\"], [3, \"directions\", 4, \"ngIf\"], [1, \"list-group\"], [\"class\", \"list-group-item\", \"style\", \"cursor: pointer\", 4, \"ngFor\", \"ngForOf\"], [3, \"position\"], [3, \"directions\"], [1, \"list-group-item\", 2, \"cursor\", \"pointer\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r7 = i0.ɵɵgetCurrentView();\n\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"label\", 2);\n      i0.ɵɵtext(3, \"Postcode:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"label\", 3);\n      i0.ɵɵtext(5, \"Postcode\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"input\", 4, 5);\n      i0.ɵɵlistener(\"keyup.enter\", function AppComponent_Template_input_keyup_enter_6_listener() {\n        i0.ɵɵrestoreView(_r7);\n\n        const _r0 = i0.ɵɵreference(7);\n\n        return i0.ɵɵresetView(ctx.onEnter(_r0.value));\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(8, \"br\");\n      i0.ɵɵelementStart(9, \"div\", 0)(10, \"div\", 1)(11, \"google-map\", 6);\n      i0.ɵɵlistener(\"mapClick\", function AppComponent_Template_google_map_mapClick_11_listener($event) {\n        return ctx.moveMap($event);\n      })(\"mapMousemove\", function AppComponent_Template_google_map_mapMousemove_11_listener($event) {\n        return ctx.move($event);\n      });\n      i0.ɵɵtemplate(12, AppComponent_map_marker_12_Template, 1, 1, \"map-marker\", 7);\n      i0.ɵɵtemplate(13, AppComponent_map_directions_renderer_13_Template, 1, 1, \"map-directions-renderer\", 8);\n      i0.ɵɵpipe(14, \"async\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(15, \"div\", 0)(16, \"div\", 1);\n      i0.ɵɵelement(17, \"hr\");\n      i0.ɵɵelementStart(18, \"ul\", 9);\n      i0.ɵɵtemplate(19, AppComponent_a_19_Template, 10, 3, \"a\", 10);\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"center\", ctx.center)(\"zoom\", ctx.zoom);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.markers);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(14, 5, ctx.directionsResults$));\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", ctx.postcodes);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.GoogleMap, i3.MapDirectionsRenderer, i3.MapMarker, i2.AsyncPipe],\n  styles: [\"agm-map[_ngcontent-%COMP%] {\\n      height: 300px;\\n    }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtJQUNJO01BQ0UsYUFBYTtJQUNmIiwiZmlsZSI6ImFwcC5jb21wb25lbnQudHMiLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICBhZ20tbWFwIHtcbiAgICAgIGhlaWdodDogMzAwcHg7XG4gICAgfVxuICAiXX0= */\"]\n});","map":{"version":3,"mappings":"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","names":["map","Postcode","i0","AppComponent","constructor","service","ngOnInit","airportLondon","lat","lng","getDataFromAPI","postcode","getData","pipe","res","JSON","parse","stringify","subscribe","next","response","console","log","postcodes","length","push","latitude","longitude","country","region","shift","changePositionMap","error","onEnter","value","long","center","markers","position","moveMap","event","latLng","toJSON","move","display","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\User\\Desktop\\Jessica\\Development\\postcodes\\postcodes-app\\src\\app\\app.component.ts","C:\\Users\\User\\Desktop\\Jessica\\Development\\postcodes\\postcodes-app\\src\\app\\app.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AppServiceService } from './app-service.service';\nimport {catchError, map} from 'rxjs/operators';\nimport { Postcode } from './shared/postcode.model';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n   styles: [`\n    agm-map {\n      height: 300px;\n    }\n  `],\n})\nexport class AppComponent implements OnInit{\n  title = 'postcodes-app';\n  postcodes: Postcode[] = [];\n  display: any;\n  postcode = '';\n\n  //maps\n  center!: google.maps.LatLngLiteral;\n  airportLondon!: google.maps.LatLngLiteral;\n  markers = []  as  any;\n  zoom = 4;\n\n  constructor(private service : AppServiceService){}\n\n  ngOnInit() {\n    this.airportLondon = {\n      lat: 51.4700223,\n      lng: -0.4542955\n    }\n  }\n\n  getDataFromAPI(postcode: string){\n    this.service.getData(postcode).pipe(map((res) => JSON.parse(JSON.stringify(res)))).subscribe({\n      next: response => {\n        console.log('Response from API is ', response);\n        if(this.postcodes.length < 3){\n          this.postcodes.push(new Postcode(response.postcode, response.latitude, response.longitude, response.country, response.region));\n        }else{\n          this.postcodes.shift();\n          this.postcodes.push(new Postcode(response.postcode, response.latitude, response.longitude, response.country, response.region));\n        }\n        \n        this.changePositionMap(response.latitude, response.longitude);\n      }, \n      error: error => {\n        console.log('Error is', error);\n      }\n    })\n  }\n\n  onEnter(value: string) {\n    this.postcode = value;\n    this.getDataFromAPI(this.postcode);\n  }\n\n\n  changePositionMap(lat: number, long: number){\n    this.center = {\n\n    }\n    this.markers.push({\n      position: {\n        lat: lat,\n        lng: long\n      }\n    })\n  }\n\n  moveMap(event: google.maps.MapMouseEvent) {\n    if (event.latLng != null) this.center = (event.latLng.toJSON());\n  }\n  move(event: google.maps.MapMouseEvent) {\n      if (event.latLng != null) this.display = event.latLng.toJSON();\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-xs-12\">\n    <label class=\"control-label\">Postcode:</label>\n\n    <label class=\"sr-only\">Postcode</label>\n    <input type=\"postcode\" class=\"form-control\"\n           id=\"inputPassword2\" placeholder=\"Postcode\"\n           #postcode\n           (keyup.enter)=\"onEnter(postcode.value)\">\n  </div>\n</div>\n<br>\n<div class=\"row\">\n  <div class=\"col-xs-12\">\n    <google-map height=\"400px\" width=\"1140px\"\n                [center]=\"center\" [zoom]=\"zoom\"\n                (mapClick)=\"moveMap($event)\"\n                (mapMousemove)=\"move($event)\">\n\n      <map-marker *ngFor=\"let marker of markers\"\n                  [position]=\"marker.position\"></map-marker>\n      <map-directions-renderer *ngIf=\"(directionsResults$ | async) as directionsResults\"\n                               [directions]=\"directionsResults\">\n      </map-directions-renderer>\n    </google-map>\n  </div>\n</div>\n<div class=\"row\">\n  <div class=\"col-xs-12\">\n    <hr>\n    <ul class=\"list-group\">\n      <a class=\"list-group-item\" style=\"cursor: pointer\"\n         *ngFor=\"let postcode of postcodes\">\n\n        <label class=\"control-label\">postcode:</label>\n        {{ postcode.postcode }}\n\n        <label class=\"control-label\">Lat.:</label>\n        ({{ postcode.latitude\n        }})\n        <label class=\"control-label\">Longitude.:</label>\n\n        {{\n        postcode.longitude }}\n      </a>\n    </ul>\n  </div>\n</div>"]},"metadata":{},"sourceType":"module"}